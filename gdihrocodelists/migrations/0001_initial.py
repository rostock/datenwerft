# Generated by Django 5.2.1 on 2025-05-28 08:33

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Codelist',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Änderung')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('name', models.CharField(unique=True, validators=[django.core.validators.RegexValidator(message='Es dürfen nur Kleinbuchstaben – exklusive ä, ö, ü sowie ß – und Bindestriche verwendet werden.', regex='^[a-z-]*$')], verbose_name='Name')),
                ('title', models.CharField(validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Titel')),
            ],
            options={
                'verbose_name': 'Codeliste',
                'verbose_name_plural': 'Codelisten',
                'ordering': ['title', 'name'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CodelistValue',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Änderung')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('value', models.CharField(validators=[django.core.validators.RegexValidator(message='Es dürfen nur Kleinbuchstaben – exklusive ä, ö, ü sowie ß – und Bindestriche verwendet werden.', regex='^[a-z-]*$')], verbose_name='Wert')),
                ('title', models.CharField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Titel')),
                ('codelist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codelistvalue_codelists', to='gdihrocodelists.codelist', verbose_name='Codeliste')),
            ],
            options={
                'verbose_name': 'Codelistenwert',
                'verbose_name_plural': 'Codelistenwerte',
                'ordering': ['codelist', 'title', 'value'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
    ]
