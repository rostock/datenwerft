# Generated by Django 5.0.6 on 2024-06-12 09:30

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Authority',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='letzte Änderung')),
                ('group', models.CharField(editable=False, verbose_name='Gruppe')),
                ('name', models.CharField(editable=False, unique=True, verbose_name='Bezeichnung')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator(message='E-Mail-Adressen müssen syntaktisch korrekt sein und daher folgendes Format aufweisen (Beispiele): abc@def.xyz oder 1cba_mno.asff@xy.a23c.zy')], verbose_name='E-Mail-Adresse')),
            ],
            options={
                'verbose_name': 'Behörde',
                'verbose_name_plural': 'Behörden',
                'db_table': 'authority',
                'ordering': ['name'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CleanupEventCodelistEquipment',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='letzte Änderung')),
                ('ordinal', models.PositiveSmallIntegerField(blank=True, null=True, unique=True, verbose_name='Ordinalzahl')),
                ('name', models.CharField(unique=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Bezeichnung')),
            ],
            options={
                'verbose_name': 'Austattung',
                'verbose_name_plural': 'Austattungen',
                'db_table': 'cleanupevent_codelist_equipment',
                'ordering': ['ordinal', 'name'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CleanupEventCodelistWasteQuantity',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='letzte Änderung')),
                ('ordinal', models.PositiveSmallIntegerField(blank=True, null=True, unique=True, verbose_name='Ordinalzahl')),
                ('name', models.CharField(unique=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Bezeichnung')),
            ],
            options={
                'verbose_name': 'Abfallmenge',
                'verbose_name_plural': 'Abfallmengen',
                'db_table': 'cleanupevent_codelist_wastequantity',
                'ordering': ['ordinal', 'name'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CleanupEventCodelistWasteType',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='letzte Änderung')),
                ('ordinal', models.PositiveSmallIntegerField(blank=True, null=True, unique=True, verbose_name='Ordinalzahl')),
                ('name', models.CharField(unique=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Bezeichnung')),
            ],
            options={
                'verbose_name': 'Abfallart',
                'verbose_name_plural': 'Abfallarten',
                'db_table': 'cleanupevent_codelist_wastetype',
                'ordering': ['ordinal', 'name'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CodelistRequestStatus',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='letzte Änderung')),
                ('ordinal', models.PositiveSmallIntegerField(blank=True, null=True, unique=True, verbose_name='Ordinalzahl')),
                ('name', models.CharField(unique=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Bezeichnung')),
                ('icon', models.CharField(blank=True, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Icon')),
            ],
            options={
                'verbose_name': 'Antragsstatus',
                'verbose_name_plural': 'Antragsstatus',
                'db_table': 'codelist_requeststatus',
                'ordering': ['ordinal', 'name'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='letzte Änderung')),
                ('key', models.CharField(editable=False, unique=True, verbose_name='Identifikator')),
                ('body', models.TextField(validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Inhalt')),
            ],
            options={
                'verbose_name': 'E-Mail',
                'verbose_name_plural': 'E-Mails',
                'db_table': 'email',
                'ordering': ['key'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Requester',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='letzte Änderung')),
                ('registered', models.BooleanField(verbose_name='registriert?')),
                ('organization', models.CharField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Organisation')),
                ('first_name', models.CharField(validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$'), django.core.validators.RegexValidator(message='Im Text darf nach einem Bindestrich kein Leerzeichen stehen.', regex='^(?!.*- ).*$'), django.core.validators.RegexValidator(message='Im Text darf vor einem Bindestrich kein Leerzeichen stehen.', regex='^(?!.* -).*$')], verbose_name='Vorname')),
                ('last_name', models.CharField(validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$'), django.core.validators.RegexValidator(message='Im Text darf nach einem Bindestrich kein Leerzeichen stehen.', regex='^(?!.*- ).*$'), django.core.validators.RegexValidator(message='Im Text darf vor einem Bindestrich kein Leerzeichen stehen.', regex='^(?!.* -).*$')], verbose_name='Nachname')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator(message='E-Mail-Adressen müssen syntaktisch korrekt sein und daher folgendes Format aufweisen (Beispiele): abc@def.xyz oder 1cba_mno.asff@xy.a23c.zy')], verbose_name='E-Mail-Adresse')),
                ('address_street', models.CharField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Straße')),
                ('address_house_number', models.CharField(blank=True, max_length=4, null=True, validators=[django.core.validators.RegexValidator(message='Die <strong><em>Hausnummer</em></strong> muss eine Zahl zwischen 1 und 999 sein, optional direkt gefolgt von einem Kleinbuchstaben.', regex='^[1-9][0-9]{0,2}[a-z]?$')], verbose_name='Hausnummer')),
                ('address_postal_code', models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='Die <strong><em>Postleitzahl</em></strong> muss aus genau fünf Ziffern bestehen.', regex='^[0-9]{5}$')], verbose_name='Postleitzahl')),
                ('address_place', models.CharField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Ort')),
            ],
            options={
                'verbose_name': 'Antragsteller:in',
                'verbose_name_plural': 'Antragsteller:innen',
                'db_table': 'requester',
                'ordering': ['last_name', 'first_name'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CleanupEventRequest',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='letzte Änderung')),
                ('responsibilities', models.ManyToManyField(db_table='cleanupevent_responsibilities', to='antragsmanagement.authority', verbose_name='Zuständigkeit(en)')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='antragsmanagement.codelistrequeststatus', verbose_name='Status')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='antragsmanagement.requester', verbose_name='Antragsteller:in')),
            ],
            options={
                'verbose_name': 'Antrag',
                'verbose_name_plural': 'Anträge',
                'db_table': 'cleanupevent_request',
                'ordering': ['-id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CleanupEventEvent',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='letzte Änderung')),
                ('from_date', models.DateField(verbose_name='vom/am')),
                ('to_date', models.DateField(blank=True, null=True, verbose_name='bis')),
                ('area', django.contrib.gis.db.models.fields.PolygonField(srid=4326, verbose_name='Fläche')),
                ('cleanupevent_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='antragsmanagement.cleanupeventrequest', verbose_name='Antrag')),
            ],
            options={
                'verbose_name': 'Aktion',
                'verbose_name_plural': 'Aktionen',
                'db_table': 'cleanupevent_event',
                'ordering': ['-cleanupevent_request'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CleanupEventDetails',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='letzte Änderung')),
                ('waste_types_annotation', models.CharField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Bemerkungen zu Abfallart(en)')),
                ('equipments', models.ManyToManyField(blank=True, db_table='cleanupevent_details_equipments', to='antragsmanagement.cleanupeventcodelistequipment', verbose_name='Austattung(en)')),
                ('waste_quantity', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='antragsmanagement.cleanupeventcodelistwastequantity', verbose_name='Abfallmenge')),
                ('waste_types', models.ManyToManyField(blank=True, db_table='cleanupevent_details_wastetypes', to='antragsmanagement.cleanupeventcodelistwastetype', verbose_name='Abfallart(en)')),
                ('cleanupevent_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='antragsmanagement.cleanupeventrequest', verbose_name='Antrag')),
            ],
            options={
                'verbose_name': 'Detailangabe',
                'verbose_name_plural': 'Detailangaben',
                'db_table': 'cleanupevent_details',
                'ordering': ['-cleanupevent_request'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CleanupEventContainer',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='letzte Änderung')),
                ('delivery_date', models.DateField(verbose_name='Stellung')),
                ('pickup_date', models.DateField(verbose_name='Abholung')),
                ('place', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Standort')),
                ('cleanupevent_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='antragsmanagement.cleanupeventrequest', verbose_name='Antrag')),
            ],
            options={
                'verbose_name': 'Container',
                'verbose_name_plural': 'Container',
                'db_table': 'cleanupevent_container',
                'ordering': ['-cleanupevent_request'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CleanupEventVenue',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='letzte Änderung')),
                ('place', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Treffpunkt')),
                ('cleanupevent_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='antragsmanagement.cleanupeventrequest', verbose_name='Antrag')),
            ],
            options={
                'verbose_name': 'Treffpunkt',
                'verbose_name_plural': 'Treffpunkte',
                'db_table': 'cleanupevent_venue',
                'ordering': ['-cleanupevent_request'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
    ]
