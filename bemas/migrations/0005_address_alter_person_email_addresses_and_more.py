# Generated by Django 4.1.7 on 2023-03-29 10:10

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('bemas', '0004_person_telephone_numbers_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Erstellung')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='letzte Änderung')),
                ('street', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen und/oder Zeilenumbrüche enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Straße')),
                ('house_number', models.SmallIntegerField(verbose_name='Hausnummer')),
                ('house_number_suffix', models.CharField(blank=True, max_length=1, null=True, validators=[django.core.validators.RegexValidator(message='Der <strong><em>Hausnummernzusatz</em></strong>muss aus genau einem Kleinbuchstaben bestehen.', regex='^[a-z]$')], verbose_name='Hausnummernzusatz')),
                ('postal_code', models.CharField(max_length=5, validators=[django.core.validators.RegexValidator(message='Die <strong><em>Postleitzahl</em></strong> muss aus genau fünf Ziffern bestehen.', regex='^[0-9]{5}$')], verbose_name='Postleitzahl')),
                ('place', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen und/oder Zeilenumbrüche enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Ort')),
            ],
            options={
                'verbose_name': 'Anschrift',
                'verbose_name_plural': 'Anschriften',
                'db_table': 'address',
                'ordering': ['place', 'postal_code', 'street', 'house_number', 'house_number_suffix'],
                'get_latest_by': 'updated_at',
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='person',
            name='email_addresses',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.EmailValidator(message='E-Mail-Adressen müssen syntaktisch korrekt sein und daher folgendes Format aufweisen (Beispiel): abc-123.098_zyx@xyz-567.def.abc')], verbose_name='E-Mail-Adresse(n)'), blank=True, null=True, size=None, verbose_name='E-Mail-Adresse(n)'),
        ),
        migrations.AlterField(
            model_name='person',
            name='first_name',
            field=models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen und/oder Zeilenumbrüche enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$'), django.core.validators.RegexValidator(message='Im Text darf nach einem Bindestrich kein Leerzeichen stehen.', regex='^(?!.*- ).*$'), django.core.validators.RegexValidator(message='Im Text darf vor einem Bindestrich kein Leerzeichen stehen.', regex='^(?!.* -).*$')], verbose_name='Vorname'),
        ),
        migrations.AlterField(
            model_name='person',
            name='last_name',
            field=models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen und/oder Zeilenumbrüche enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$'), django.core.validators.RegexValidator(message='Im Text darf nach einem Bindestrich kein Leerzeichen stehen.', regex='^(?!.*- ).*$'), django.core.validators.RegexValidator(message='Im Text darf vor einem Bindestrich kein Leerzeichen stehen.', regex='^(?!.* -).*$')], verbose_name='Nachname'),
        ),
        migrations.AlterField(
            model_name='person',
            name='telephone_numbers',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(message='Die Schreibweise von Telefonnummern müssen der Empfehlung E.123 der Internationalen Fernmeldeunion entsprechen und daher folgendes Format aufweisen (Beispiel): +49 381 3816256', regex='^\\+(1 )?([0-9]{1,3}) [1-9][0-9]{1,5} [0-9]{1,13}$')], verbose_name='Telefonnummer(n)'), blank=True, null=True, size=None, verbose_name='Telefonnummer(n)'),
        ),
    ]
