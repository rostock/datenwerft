# Generated by Django 4.1.7 on 2023-03-30 11:40

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('bemas', '0009_organization'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='organization',
            name='address',
        ),
        migrations.RemoveField(
            model_name='person',
            name='address',
        ),
        migrations.AddField(
            model_name='organization',
            name='address_house_number',
            field=models.CharField(blank=True, max_length=4, null=True, validators=[django.core.validators.RegexValidator(message='Die <strong><em>Hausnummer</em></strong> muss eine Zahl zwischen 1 und 999 sein, optional gefolgt von einem Kleinbuchstaben.', regex='^[1-9][0-9]{0,2}[a-z]?$')], verbose_name='Hausnummer'),
        ),
        migrations.AddField(
            model_name='organization',
            name='address_place',
            field=models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen und/oder Zeilenumbrüche enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Ort'),
        ),
        migrations.AddField(
            model_name='organization',
            name='address_postal_code',
            field=models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='Die <strong><em>Postleitzahl</em></strong> muss aus genau fünf Ziffern bestehen.', regex='^[0-9]{5}$')], verbose_name='Postleitzahl'),
        ),
        migrations.AddField(
            model_name='organization',
            name='address_street',
            field=models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen und/oder Zeilenumbrüche enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Straße'),
        ),
        migrations.AddField(
            model_name='organization',
            name='dms_link',
            field=models.CharField(blank=True, max_length=16, null=True, validators=[django.core.validators.RegexValidator(message='Der <strong><em>d.3</em></strong>-Vorgang muss folgendes Format aufweisen (Beispiel): 552.6#04-004/008', regex='^[0-9]{3}\\.[0-9]#[0-9]{2}-[0-9]{3}\\/[0-9]{3}$')], verbose_name='d.3'),
        ),
        migrations.AddField(
            model_name='person',
            name='address_house_number',
            field=models.CharField(blank=True, max_length=4, null=True, validators=[django.core.validators.RegexValidator(message='Die <strong><em>Hausnummer</em></strong> muss eine Zahl zwischen 1 und 999 sein, optional gefolgt von einem Kleinbuchstaben.', regex='^[1-9][0-9]{0,2}[a-z]?$')], verbose_name='Hausnummer'),
        ),
        migrations.AddField(
            model_name='person',
            name='address_place',
            field=models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen und/oder Zeilenumbrüche enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Ort'),
        ),
        migrations.AddField(
            model_name='person',
            name='address_postal_code',
            field=models.CharField(blank=True, max_length=5, null=True, validators=[django.core.validators.RegexValidator(message='Die <strong><em>Postleitzahl</em></strong> muss aus genau fünf Ziffern bestehen.', regex='^[0-9]{5}$')], verbose_name='Postleitzahl'),
        ),
        migrations.AddField(
            model_name='person',
            name='address_street',
            field=models.CharField(blank=True, max_length=255, null=True, validators=[django.core.validators.RegexValidator(message='Texte dürfen keine Akute (´) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*´).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Schreibmaschinensatz-Anführungszeichen (") enthalten. Stattdessen müssen die typographisch korrekten Anführungszeichen („“) verwendet werden.', regex='^(?!.*\\").*$'), django.core.validators.RegexValidator(message="Texte dürfen keine einfachen Schreibmaschinensatz-Anführungszeichen (') enthalten. Stattdessen muss der typographisch korrekte Apostroph(’) verwendet werden.", regex="^(?!.*\\').*$"), django.core.validators.RegexValidator(message='Texte dürfen keine doppelten Leerzeichen und/oder Zeilenumbrüche enthalten.', regex='^(?!.*  ).*$'), django.core.validators.RegexValidator(message='Texte dürfen keine Gravis (`) enthalten. Stattdessen muss der typographisch korrekte Apostroph (’) verwendet werden.', regex='^(?!.*`).*$')], verbose_name='Straße'),
        ),
        migrations.AddConstraint(
            model_name='organization',
            constraint=models.CheckConstraint(check=models.Q(('address_house_number__gte', 1)), name='organization_address_house_number_gte_1'),
        ),
        migrations.AddConstraint(
            model_name='organization',
            constraint=models.CheckConstraint(check=models.Q(('address_house_number__lte', 999)), name='organization_address_house_number_lte_999'),
        ),
        migrations.AddConstraint(
            model_name='person',
            constraint=models.CheckConstraint(check=models.Q(('address_house_number__gte', 1)), name='person_address_house_number_gte_1'),
        ),
        migrations.AddConstraint(
            model_name='person',
            constraint=models.CheckConstraint(check=models.Q(('address_house_number__lte', 999)), name='person_address_house_number_lte_999'),
        ),
        migrations.DeleteModel(
            name='Address',
        ),
    ]
